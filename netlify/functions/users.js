import { google } from "googleapis";
import path from "path";

// üîë –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É JSON –∫–ª—é—á—É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
const KEY_PATH = path.join(process.cwd(), "service-account.json");

// ‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const SCOPES = ["https://www.googleapis.com/auth/spreadsheets"];
const SPREADSHEET_ID = "16V78B6_ucC19jer1MA9An0RGU2XXqiwkeiZRWKnV4bI"; // –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ ID —Ç–∞–±–ª–∏—Ü—ã (–∏–∑ URL)
const SHEET_NAME = "Users";

// —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç Google Sheets
const auth = new google.auth.GoogleAuth({
  keyFile: KEY_PATH,
  scopes: SCOPES,
});
const sheets = google.sheets({ version: "v4", auth });

// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
function generateReferralCode(length = 6) {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  let code = "";
  for (let i = 0; i < length; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
}

// Netlify Function handler
export async function handler(event) {
  if (event.httpMethod !== "POST") {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: "Method not allowed" }),
    };
  }

  try {
    const data = JSON.parse(event.body);

    if (!data.action) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "No action provided" }),
      };
    }

    // –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –ª–∏—Å—Ç–∞
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: `${SHEET_NAME}!A:E`,
    });
    const users = res.data.values || [];

    // -------------------
    // üìå –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
    // -------------------
    if (data.action === "register") {
      const { name, email, invitedBy } = data;
      if (!name || !email) {
        return {
          statusCode: 400,
          body: JSON.stringify({ status: "error", message: "Name and email required" }),
        };
      }

      // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ email
      const emails = users.map(row => row[1]);
      if (emails.includes(email)) {
        return {
          statusCode: 200,
          body: JSON.stringify({ status: "error", message: "Email already registered" }),
        };
      }

      // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏ —Å–∫–∏–¥–∫—É
      const referralCode = generateReferralCode();
      let discount = 0;

      // –µ—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ —á–µ–π-—Ç–æ –∫–æ–¥ ‚Üí –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –¥–∞—ë–º —Å–∫–∏–¥–∫—É
      if (invitedBy) {
        for (let i = 0; i < users.length; i++) {
          if (users[i][2] === invitedBy) {
            const row = i + 1; // –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ (1-based)
            await sheets.spreadsheets.values.update({
              spreadsheetId: SPREADSHEET_ID,
              range: `${SHEET_NAME}!D${row}`,
              valueInputOption: "RAW",
              requestBody: { values: [[5]] }, // —Å—Ç–∞–≤–∏–º 5% —Å–∫–∏–¥–∫–∏
            });
            break;
          }
        }
      }

      // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
      await sheets.spreadsheets.values.append({
        spreadsheetId: SPREADSHEET_ID,
        range: SHEET_NAME,
        valueInputOption: "RAW",
        requestBody: {
          values: [[name, email, referralCode, discount, invitedBy || ""]],
        },
      });

      return {
        statusCode: 200,
        body: JSON.stringify({ status: "success", referralCode, discount }),
      };
    }

    // -------------------
    // üìå –õ–û–ì–ò–ù
    // -------------------
    if (data.action === "login") {
      const { email } = data;
      if (!email) {
        return {
          statusCode: 400,
          body: JSON.stringify({ status: "error", message: "Email required" }),
        };
      }

      for (let i = 0; i < users.length; i++) {
        if (users[i][1] === email) {
          return {
            statusCode: 200,
            body: JSON.stringify({
              status: "success",
              name: users[i][0],
              referralCode: users[i][2],
              discount: users[i][3],
            }),
          };
        }
      }

      return {
        statusCode: 200,
        body: JSON.stringify({ status: "error", message: "User not found" }),
      };
    }

    // –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    return {
      statusCode: 400,
      body: JSON.stringify({ status: "error", message: "Unknown action" }),
    };

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", err);
    return {
      statusCode: 500,
      body: JSON.stringify({ status: "error", message: err.message }),
    };
  }
}
